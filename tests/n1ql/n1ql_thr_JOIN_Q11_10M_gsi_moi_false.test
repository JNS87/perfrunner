[test_case]
test = perfrunner.tests.n1ql.N1QLJoinTest
title = Q11, Complex Join, MOI, request_plus

[cluster]
mem_quota = 51200
index_mem_quota = 200000
initial_nodes = 6
num_buckets = 3

[bucket]
replica_number = 0

[secondary]
indexer.settings.storage_mode = memory_optimized
indexer.settings.compaction.min_size = 1048576
indexer.settings.persisted_snapshot.interval = 3000
indexer.settings.wal_size = 40960
indexer.settings.maxVbQueueLength = 10000
indexer.settings.max_cpu_percent = 2400
indexer.settings.scan_timeout = 0
indexer.settings.gc_percent = 200

[load]
items = 10000000
size = 1024
workers = 80
doc_gen = ext_reverse_lookup,join,ref

[n1ql]
indexes =
    ::
    by_capped_large::CREATE INDEX {name} ON `{bucket}`(capped_large);

[access]
creates = 0
reads = 0
updates = 100
deletes = 0
throughput = 15000
items = 10000000
workers = 20
time = 1200
n1ql_gen = join
n1ql_queries = complex-join
n1ql_throughput = 1000000
n1ql_workers = 720

[n1ql-complex-join]
prepared = complex_join
statement = SELECT u.email AS email, COUNT(t.title) FROM `bucket-2` t INNER JOIN `bucket-3` c ON KEYS t.categories LEFT OUTER JOIN `bucket-1` u ON KEYS t.owner WHERE t.capped_large = $1 AND c.name = $2 GROUP BY u.email;
scan_consistency = request_plus
args = ["{capped_large}","{categories[0]}"]
