[test_case]
test = perfrunner.tests.n1ql.N1QLMixedThroughputTest
title = Q20, Mixed Queries, MOI, not_bounded
component = n1ql
category = mixed

[cluster]
mem_quota = 20480
index_mem_quota = 100000
initial_nodes = 6
num_buckets = 1

[secondary]
indexer.settings.storage_mode = memory_optimized

[load]
items = 20000000
size = 1024
workers = 80
doc_gen = reverse_lookup

[n1ql]
indexes =
    primary_idx::CREATE PRIMARY INDEX {name} ON `{bucket}`;
    by_email::CREATE INDEX {name} ON `{bucket}`(email);
    by_capped_small::CREATE INDEX {name} ON `{bucket}`(capped_small);

[access]
creates = 0
reads = 0
updates = 100
deletes = 0
throughput = 30000
items = 20000000
workers = 25
time = 1200
n1ql_queries = key-value-lookup,singleton-unique-lookup,range-scan,primary-range-scan,order-by-query
n1ql_workers = 256

[n1ql-key-value-lookup]
statement = SELECT * FROM `bucket-1` USE KEYS[$1];
args = ["{key}"]

[n1ql-singleton-unique-lookup]
statement = SELECT * FROM `bucket-1` WHERE email = $1;
scan_consistency = not_bounded
args = ["{email}"]

[n1ql-range-scan]
statement = SELECT name AS _name, street AS _street FROM `bucket-1` WHERE capped_small=$1;
scan_consistency = not_bounded
args = ["{capped_small}"]

[n1ql-primary-range-scan]
statement = SELECT RAW meta().id FROM `bucket-1` WHERE meta().id >= $1 ORDER BY meta().id LIMIT 50;
scan_consistency = not_bounded
args = ["{key}"]

[n1ql-order-by-query]
statement = SELECT name AS _name, street AS _street FROM `bucket-1` WHERE capped_small=$1 ORDER BY name LIMIT 10;
scan_consistency = not_bounded
args = ["{capped_small}"]
